#!/bin/bash
# LUKS related functions

. /etc/functions
. /etc/gui_functions
. /tmp/config

# List all LUKS devices on the system that are not USB
list_local_luks_devices() {
    TRACE_FUNC
    lvm vgscan || true
    blkid | cut -d ':' -f 1 | while read -r device; do
        DEBUG "Checking device: $device"
        if cryptsetup isLuks "$device"; then
            DEBUG "Device $device is a LUKS device"
            dev_name=$(basename "$device")
            parent_dev_name=$(echo "$dev_name" | sed 's/[0-9]*$//')
            if [ -e "/sys/block/$parent_dev_name" ]; then
                DEBUG "Device $device exists in /sys/block"
                if ! stat -c %N "/sys/block/$parent_dev_name" 2>/dev/null | grep -q "usb"; then
                    DEBUG "Device $device is not a USB device"
                    echo "$device"
                else
                    DEBUG "Device $device is a USB device, skipping"
                fi
            else
                DEBUG "Device $device does not exist in /sys/block, skipping"
            fi
        else
            DEBUG "Device $device is not a LUKS device"
        fi
    done | sort
}

# Prompt for LUKS Disk Recovery Key passphrase
prompt_luks_passphrase() {
    TRACE_FUNC
    while [[ ${#luks_passphrase} -lt 8 ]]; do
        echo -e "\nEnter the LUKS Disk Recovery Key passphrase (At least 8 characters long):"
        read -r -s luks_passphrase
        if [[ ${#luks_passphrase} -lt 8 ]]; then
            echo -e "\nPassphrase must be at least 8 characters long. Please try again."
            unset luks_passphrase
            continue
        fi
        echo -e "\nConfirm the LUKS Disk Recovery Key passphrase:"
        read -r -s luks_passphrase_confirm
        if [ "$luks_passphrase" != "$luks_passphrase_confirm" ]; then
            echo -e "\nPassphrases do not match. Please try again."
            unset luks_passphrase
            unset luks_passphrase_confirm
        fi
    done
    echo -n "$luks_passphrase" >/tmp/secret/luks_passphrase
}

# Test LUKS passphrase against all found LUKS containers that are not USB
test_luks_passphrase() {
    TRACE_FUNC
    list_local_luks_devices >/tmp/luks_devices.txt
    if [ ! -s /tmp/luks_devices.txt ]; then
        warn "No LUKS devices found"
        return 1
    fi

    valid_luks_devices=()
    while read -r luks_device; do
        DEBUG "Testing passphrase on $luks_device"
        if cryptsetup open --test-passphrase "$luks_device" --key-file /tmp/secret/luks_passphrase; then
            DEBUG "Passphrase valid for $luks_device"
            valid_luks_devices+=("$luks_device")
        else
            DEBUG "Passphrase test failed on $luks_device"
        fi
    done </tmp/luks_devices.txt

    if [ ${#valid_luks_devices[@]} -eq 0 ]; then
        return 1
    fi

    # Export the valid LUKS devices
    export LUKS="${valid_luks_devices[*]}"
    return 0
}

# Confirm with the user to use all unlockable LUKS partitions
confirm_luks_partitions() {
    TRACE_FUNC
    MSG="The following LUKS partitions can be unlocked:\n\n${LUKS}\n\nDo you want to use all of these partitions?"
    if [ -x /bin/whiptail ]; then
        if ! whiptail --title "Confirm LUKS Partitions" --yesno "$MSG" 0 80; then
            die "User aborted the operation"
        fi
    else
        echo -e "$MSG"
        read -p "Do you want to use all of these partitions? (y/n): " confirm
        if [ "$confirm" != "y" ]; then
            die "User aborted the operation"
        fi
    fi
}

# Main function to prompt for passphrase, test it, and confirm partitions
main_luks_selection() {
    TRACE_FUNC
    prompt_luks_passphrase
    if ! test_luks_passphrase; then
        die "Passphrase test failed on all LUKS devices"
    fi
    confirm_luks_partitions
    DEBUG "Selected LUKS partitions: $LUKS"
}

# Select LUKS container
select_luks_container() {
    TRACE_FUNC
    if [ -s /boot/kexec_key_devices.txt ]; then
        DEBUG "Reusing known good LUKS container device from /boot/kexec_key_devices.txt"
        LUKS=$(cut -d ' ' -f1 /boot/kexec_key_devices.txt)
        DEBUG "LUKS container device: $(echo $LUKS)"
    elif [ -z "$LUKS" ]; then
        main_luks_selection
    fi
}

# Test LUKS current disk recovery key passphrase
test_luks_current_disk_recovery_key_passphrase() {
    TRACE_FUNC
    while :; do
        select_luks_container || return 1

        PRINTABLE_LUKS=$(echo $LUKS)

        if [ -z "$luks_current_Disk_Recovery_Key_passphrase" ]; then
            if [ -f /tmp/secret/luks_current_Disk_Recovery_Key_passphrase ]; then
                luks_current_Disk_Recovery_Key_passphrase=$(cat /tmp/secret/luks_current_Disk_Recovery_Key_passphrase)
            else
                echo -e "\nEnter the current LUKS Disk Recovery Key passphrase (Configured at OS installation or by OEM):"
                read -r luks_current_Disk_Recovery_Key_passphrase
                echo -n "$luks_current_Disk_Recovery_Key_passphrase" >/tmp/secret/luks_current_Disk_Recovery_Key_passphrase
            fi
        else
            echo -n "$luks_current_Disk_Recovery_Key_passphrase" >/tmp/secret/luks_current_Disk_Recovery_Key_passphrase
        fi

        echo -e "\n$PRINTABLE_LUKS: Test unlocking of LUKS encrypted drive content with current LUKS Disk Recovery Key passphrase..."

        for luks_container in $LUKS; do
            DEBUG "$luks_container: Test unlocking of LUKS encrypted drive content with current LUKS Disk Recovery Key passphrase..."
            if ! cryptsetup open --test-passphrase "$luks_container" --key-file /tmp/secret/luks_current_Disk_Recovery_Key_passphrase; then
                whiptail_error --title "$luks_container: Wrong current LUKS Disk Recovery Key passphrase?" --msgbox \
                    "If you previously changed it and do not remember it, you will have to reinstall the OS from an external drive.\n\nTo do so, place the ISO file and its signature file on root of an external drive, and select Options-> Boot from USB \n\nHit Enter to retry." 0 80
                detect_boot_device
                mount -o remount,rw /boot
                rm -f /boot/kexec_key_devices.txt
                mount -o remount,ro /boot
                luks_secrets_cleanup
                unset LUKS
            else
                echo "$luks_container: unlocking LUKS container with current Disk Recovery Key passphrase successful"
                export luks_current_Disk_Recovery_Key_passphrase
            fi
        done

        if [ -n "$LUKS" ]; then
            export LUKS
            TRACE_FUNC
            DEBUG "LUKS container(s) $PRINTABLE_LUKS exported to be reused"
            break
        fi
    done
}

# Function to re-encrypt LUKS partitions
luks_reencrypt() {
    TRACE_FUNC
    test_luks_current_disk_recovery_key_passphrase || return 1

    luks_containers=($LUKS)
    TRACE_FUNC
    DEBUG "luks_containers: ${luks_containers[@]}"

    for luks_container in "${luks_containers[@]}"; do
        if [ -z "$luks_current_Disk_Recovery_Key_passphrase" ]; then
            if [ -f /tmp/secret/luks_current_Disk_Recovery_Key_passphrase ]; then
                luks_current_Disk_Recovery_Key_passphrase=$(cat /tmp/secret/luks_current_Disk_Recovery_Key_passphrase)
            else
                msg=$(echo -e "This will replace the encrypted container content and its LUKS Disk Recovery Key.\n\nThe passphrase associated with this key will be asked from the user under the following conditions:\n 1-Every boot if no Disk Unlock Key was added to the TPM\n 2-If the TPM fails (hardware failure)\n 3-If the firmware has been tampered with/modified by the user\n\nThis process requires you to type the current LUKS Disk Recovery Key passphrase and will delete the LUKS TPM Disk Unlock Key slot, if set up, by setting a default boot LUKS key slot (1) if present.\n\nAt the next prompt, you may be asked to select which file corresponds to the LUKS device container.\n\nHit Enter to continue." | fold -w 70 -s)
                whiptail --title 'Reencrypt LUKS encrypted container ?' --msgbox "$msg" 0 80
                echo -e "\nEnter the current LUKS Disk Recovery Key passphrase:"
                read -r luks_current_Disk_Recovery_Key_passphrase
                echo -n "$luks_current_Disk_Recovery_Key_passphrase" >/tmp/secret/luks_current_Disk_Recovery_Key_passphrase
            fi
        else
            echo -n "$luks_current_Disk_Recovery_Key_passphrase" >/tmp/secret/luks_current_Disk_Recovery_Key_passphrase
        fi

        DEBUG "$luks_container: Test unlocking of LUKS encrypted drive content with current LUKS Disk Recovery Key passphrase..."
        if ! DO_WITH_DEBUG cryptsetup open --test-passphrase "$luks_container" --key-file /tmp/secret/luks_current_Disk_Recovery_Key_passphrase >/dev/null 2>&1; then
            whiptail_error --title "$luks_container: Wrong current LUKS Disk Recovery Key passphrase?" --msgbox \
                "If you previously changed it and do not remember it, you will have to reinstall the OS from an external drive.\n\nTo do so, place the ISO file and its signature file on root of an external drive, and select Options-> Boot from USB \n\nHit Enter to retry." 0 80
            TRACE_FUNC
            detect_boot_device
            mount -o remount,rw /boot
            rm -f /boot/kexec_key_devices.txt
            mount -o remount,ro /boot
            luks_secrets_cleanup
            unset LUKS
            continue
        fi

        DEBUG "Test opening ${luks_containers[@]} successful. Now testing key slots to determine which holds master key"
        for luks_container in "${luks_containers[@]}"; do
            DRK_KEYSLOT=-1
            DEBUG "$luks_container: Test unlocking of LUKS encrypted drive content with current LUKS Disk Recovery Key passphrase..."
            for i in $(seq 0 31); do
                if DO_WITH_DEBUG cryptsetup open --test-passphrase $luks_container --key-slot $i --key-file /tmp/secret/luks_current_Disk_Recovery_Key_passphrase >/dev/null 2>&1; then
                    DRK_KEYSLOT=$i
                    DEBUG "$luks_container: Found key-slot $DRK_KEYSLOT that can be unlocked with the current passphrase. breaking loop"
                    break
                fi
            done

            if [ $DRK_KEYSLOT -eq -1 ]; then
                whiptail_error --title "$luks_container: Wrong current LUKS Disk Recovery Key passphrase?" --msgbox \
                    "If you previously changed it and do not remember it, you will have to reinstall the OS from an external drive.\n\nTo do so, place the ISO file and its signature file on root of an external drive, and select Options-> Boot from USB \n\nHit Enter to retry." 0 80
                TRACE_FUNC
                detect_boot_device
                mount -o remount,rw /boot
                rm -f /boot/kexec_key_devices.txt
                mount -o remount,ro /boot
                luks_secrets_cleanup
                unset LUKS
                continue
            fi

            echo -e "\nReencrypting $luks_container LUKS encrypted drive content with current Recovery Disk Key passphrase..."
            warn "DO NOT POWER DOWN MACHINE, UNPLUG AC OR REMOVE BATTERY DURING REENCRYPTION PROCESS"

            if ! DO_WITH_DEBUG cryptsetup reencrypt \
                --perf-no_read_workqueue --perf-no_write_workqueue \
                --resilience=none --force-offline-reencrypt --disable-locks \
                "$luks_container" --key-slot "$DRK_KEYSLOT" \
                --key-file /tmp/secret/luks_current_Disk_Recovery_Key_passphrase; then
                whiptail_error --title "$luks_container: Wrong current LUKS Disk Recovery Key passphrase?" --msgbox \
                    "If you previously changed it and do not remember it, you will have to reinstall the OS from an external drive.\n\nTo do so, place the ISO file and its signature file on root of an external drive, and select Options-> Boot from USB \n\nHit Enter to retry." 0 80
                TRACE_FUNC
                detect_boot_device
                mount -o remount,rw /boot
                rm -f /boot/kexec_key_devices.txt
                mount -o remount,ro /boot
                luks_secrets_cleanup
                unset LUKS
            else
                export luks_current_Disk_Recovery_Key_passphrase
                export LUKS
            fi
        done
    done
}

# Function to change LUKS passphrase
luks_change_passphrase() {
    TRACE_FUNC
    test_luks_current_disk_recovery_key_passphrase || return 1

    luks_containers=($LUKS)
    TRACE_FUNC
    DEBUG "luks_containers: ${luks_containers[@]}"

    for luks_container in "${luks_containers[@]}"; do
        if [ -z "$luks_current_Disk_Recovery_Key_passphrase" ] || [ -z "$luks_new_Disk_Recovery_Key_passphrase" ]; then
            if [ -f /tmp/secret/luks_current_Disk_Recovery_Key_passphrase ]; then
                luks_current_Disk_Recovery_Key_passphrase=$(cat /tmp/secret/luks_current_Disk_Recovery_Key_passphrase)
            else
                whiptail --title 'Changing LUKS Disk Recovery Key passphrase' --msgbox \
                    "Please enter the current LUKS Disk Recovery Key passphrase (slot 0).\nThen choose a strong passphrase of your own.\n\n**DICEWARE passphrase methodology is STRONGLY ADVISED.**\n\nHit Enter to continue" 0 80

                echo -e "\nEnter your desired replacement for the actual LUKS Disk Recovery Key passphrase (At least 8 characters long):"
                while [[ ${#luks_new_Disk_Recovery_Key_passphrase} -lt 8 ]]; do
                    read -r luks_new_Disk_Recovery_Key_passphrase
                done

                echo -e "\nEnter the current LUKS Disk Recovery Key passphrase (Configured at OS installation or by OEM):"
                read -r luks_current_Disk_Recovery_Key_passphrase
            fi
        fi

        echo -n "$luks_current_Disk_Recovery_Key_passphrase" >/tmp/secret/luks_current_Disk_Recovery_Key_passphrase
        echo -n "$luks_new_Disk_Recovery_Key_passphrase" >/tmp/secret/luks_new_Disk_Recovery_Key_passphrase

        DEBUG "$luks_container: Test unlocking of LUKS encrypted drive content with current LUKS Disk Recovery Key passphrase..."
        if ! DO_WITH_DEBUG cryptsetup open --test-passphrase "$luks_container" --key-file /tmp/secret/luks_current_Disk_Recovery_Key_passphrase >/dev/null 2>&1; then
            whiptail_error --title "$luks_container: Wrong current LUKS Disk Recovery Key passphrase?" --msgbox \
                "If you previously changed it and do not remember it, you will have to reinstall the OS from an external drive.\n\nTo do so, place the ISO file and its signature file on root of an external drive, and select Options-> Boot from USB \n\nHit Enter to retry." 0 80
            TRACE_FUNC
            detect_boot_device
            mount -o remount,rw /boot
            rm -f /boot/kexec_key_devices.txt
            mount -o remount,ro /boot
            luks_secrets_cleanup
            unset LUKS
            continue
        fi

        echo -e "\nChanging $luks_container LUKS encrypted disk passphrase to the new LUKS Disk Recovery Key passphrase..."
        if ! DO_WITH_DEBUG cryptsetup luksChangeKey "$luks_container" --key-file=/tmp/secret/luks_current_Disk_Recovery_Key_passphrase /tmp/secret/luks_new_Disk_Recovery_Key_passphrase; then
            whiptail_error --title 'Failed to change LUKS passphrase' --msgbox \
                "Failed to change the passphrase for $luks_container.\nPlease try again." 0 80
            continue
        fi

        echo "Success changing passphrase for $luks_container."
    done

    luks_current_Disk_Recovery_Key_passphrase=$luks_new_Disk_Recovery_Key_passphrase
    export luks_current_Disk_Recovery_Key_passphrase
    export luks_new_Disk_Recovery_Key_passphrase
    export LUKS
}

# Cleanup LUKS secrets
luks_secrets_cleanup() {
    TRACE_FUNC
    shred -n 10 -z -u /tmp/secret/luks_new_Disk_Recovery_Key_passphrase 2>/dev/null || true
    shred -n 10 -z -u /tmp/secret/luks_current_Disk_Recovery_Key_passphrase 2>/dev/null || true
    unset luks_current_Disk_Recovery_Key_passphrase
    unset luks_new_Disk_Recovery_Key_passphrase
}
