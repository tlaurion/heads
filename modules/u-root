# u-root go runtime
#
# This is not a normal Heads module, since it builds all of its
# own dependencies.
#
ifeq "$(CONFIG_UROOT)" "y"
u-root_url := https://github.com/u-root/u-root
u-root_output := $(build)/$(BOARD)/u-root.cpio
tinycore_lib_path=$(build)/tinycorelibs
tinycore_core_gz=$(tinycore_lib_path)/rootfs64.gz
tinycore_rootfs_files=lib/ld-linux-x86-64.so.2 lib/libanl.so.1 lib/libc.so.6 lib/libdl.so.2 lib/libm.so.6 lib/libpthread.so.0 lib/librt.so.1 usr/lib/libgcc_s.so.1 lib/libcrypt.so.1 lib/libutil.so.1
#
#


#UROOT_CMDS ?= exp/tcz
UROOT_CMDS ?= core/wget

export GOPATH=$(build)/u-root
UROOT_PATH=$(GOPATH)/src/github.com/u-root
UROOT_BUILT_PATH=$(GOPATH)/src/github.com/u-root/u-root

#Substitutions
#translate paths so that user can only specify what is found under u-root/cmds/ directory under UROOT_CMDS from board config to overwrite default above
u-root_src_cmds := $(foreach cmd,$(UROOT_CMDS),github.com/u-root/u-root/cmds/$(cmd))
#translate tinycore extracted rootfs real path into initramfs desired path. tinycore embeds lib/xyz already 
#tinycore_libs_to_path := $(foreach libfile,$(tinycore_rootfs_files),$(tinycore_lib_path)/$(libfile):$(libfile))
#translate each libs from tinycore_lib_path to usable u-root -files tuple (/real/local/path:desired/initramfs/path)
#u-root_files_statement:= $(foreach libfile,$(tinycore_rootfs_files),-files $(tinycore_lib_path)/$(libfile):$(libfile))
u-root_files_statement:= -files /etc/ssl/certs/ca-certificates.crt


u-root_build := $(UROOT_BUILT_PATH)

$(UROOT_BUILT_PATH):
	mkdir -p $(GOPATH)/src/github.com/u-root/
	git clone https://github.com/u-root/u-root.git $(UROOT_PATH)
	cd $(UROOT_PATH) && go build

# If the board directory has its own go commands, copy them
# into the u-root tree so that they will be bundled into the go initrd
# TODO: generalize this to support more commands
# TODO: fix this sort that it doesn't leave commands lying around
# 
ifeq "y" "$(shell [ -r 'boards/$(BOARD)/uinit.go' ] && echo y)"
u-root_uinit := $(GOPATH)/src/github.com/u-root/u-root/cmds/uinit/uinit.go
$(u-root_uinit): $(u-root_build) boards/$(BOARD)/uinit.go
	$(call install,boards/$(BOARD)/uinit.go,$@)
endif

#TODO: put anchor here for rootfs download path to download if not present
$(tinycore_core_gz): 
	mkdir -p $(tinycore_lib_path)
	cd $(tinycore_lib_path) \
		&& wget http://tinycorelinux.net/14.x/x86_64/release/distribution_files/rootfs64.gz \
		&& zcat rootfs64.gz | cpio -i > /dev/null 2>&1 || true
		
$(u-root_output): $(u-root_build) $(u-root_uinit) $(tinycore_core_gz)
	$(UROOT_BUILT_PATH) \
	-uroot-source $(UROOT_PATH) \
	-initcmd="" \
	-build=gbb \
	-defaultsh="" \
	$(u-root_files_statement) \
	-format=cpio \
	-o $@  \
	$(u-root_src_cmds) 

# Override the initrd inputs and add in the kernel modules
initrd-$(CONFIG_UROOT) += $(u-root_output)

# Since we do not include u-root in modules-y, we have to define our
# own intermediate and clean targets here
$(build)/$(u-root_dir)/.build: $(u-root_output)
u-root.clean:
	$(RM) $(u-root_output)
endif
